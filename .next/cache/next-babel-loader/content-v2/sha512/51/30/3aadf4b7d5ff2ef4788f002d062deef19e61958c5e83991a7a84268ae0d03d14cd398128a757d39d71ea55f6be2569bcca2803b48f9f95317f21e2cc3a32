{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\Gil\\\\Downloads\\\\Coding\\\\react-projects\\\\meetups-nextjs\\\\pages\\\\[meetupId]\\\\index.js\";\n// alternative way:dismiss the dynamic folder [meetupId] and name the file[meetupId].js\nimport MeetupDetail from './../../components/meetups/MeetupDetail';\n\nfunction MeetupDetails(props) {\n  return /*#__PURE__*/_jsxDEV(MeetupDetail, {\n    image: props.meetupData.image,\n    title: props.meetupData.title,\n    address: props.meetupData.address,\n    description: props.meetupData.description\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 7,\n    columnNumber: 3\n  }, this);\n}\n\n_c = MeetupDetails;\nexport var __N_SSG = true;\nexport default MeetupDetails;\n\nvar _c;\n\n$RefreshReg$(_c, \"MeetupDetails\");","map":{"version":3,"sources":["C:/Users/Gil/Downloads/Coding/react-projects/meetups-nextjs/pages/[meetupId]/index.js"],"names":["MeetupDetail","MeetupDetails","props","meetupData","image","title","address","description"],"mappings":";;AAAA;AAEA,OAAOA,YAAP,MAAyB,yCAAzB;;AAEA,SAASC,aAAT,CAAuBC,KAAvB,EAA8B;AAC7B,sBACC,QAAC,YAAD;AACC,IAAA,KAAK,EAAEA,KAAK,CAACC,UAAN,CAAiBC,KADzB;AAEC,IAAA,KAAK,EAAEF,KAAK,CAACC,UAAN,CAAiBE,KAFzB;AAGC,IAAA,OAAO,EAAEH,KAAK,CAACC,UAAN,CAAiBG,OAH3B;AAIC,IAAA,WAAW,EAAEJ,KAAK,CAACC,UAAN,CAAiBI;AAJ/B;AAAA;AAAA;AAAA;AAAA,UADD;AAQA;;KATQN,a;;AA6DT,eAAeA,aAAf","sourcesContent":["// alternative way:dismiss the dynamic folder [meetupId] and name the file[meetupId].js\r\nimport { MongoClient, ObjectId } from 'mongodb';\r\nimport MeetupDetail from './../../components/meetups/MeetupDetail';\r\n\r\nfunction MeetupDetails(props) {\r\n\treturn (\r\n\t\t<MeetupDetail\r\n\t\t\timage={props.meetupData.image}\r\n\t\t\ttitle={props.meetupData.title}\r\n\t\t\taddress={props.meetupData.address}\r\n\t\t\tdescription={props.meetupData.description}\r\n\t\t/>\r\n\t);\r\n}\r\n\r\nexport async function getStaticPaths() {\r\n\t// should be used for dynamic pages (when id changes)\r\n\tconst client = await MongoClient.connect(\r\n\t\t'mongodb+srv://gil:test1234@cluster0.l3sni.mongodb.net/meetups?retryWrites=true&w=majority'\r\n\t);\r\n\tconst db = client.db();\r\n\r\n\tconst meetupCollection = db.collection('meetups');\r\n\r\n\tconst meetups = await meetupCollection.find({}, { _id: 1 }).toArray();\r\n\r\n\tclient.close();\r\n\r\n\treturn {\r\n\t\tfallback: false, // if visiting a page which its id doesnt exit-he will get 404 page\r\n\t\tpaths: meetups.map((meetup) => ({\r\n\t\t\tparams: { meetupId: meetup._id.toString() }\r\n\t\t}))\r\n\t};\r\n}\r\n\r\nexport async function getStaticProps(context) {\r\n\tconst meetupId = context.params.meetupId;\r\n\r\n\t// fetch data for a single meetup\r\n\r\n\tconst client = await MongoClient.connect(\r\n\t\t'mongodb+srv://gil:test1234@cluster0.l3sni.mongodb.net/meetups?retryWrites=true&w=majority'\r\n\t);\r\n\tconst db = client.db();\r\n\r\n\tconst meetupCollection = db.collection('meetups');\r\n\r\n\tconst selectedMeetup = await meetupCollection.findOne({ _id: ObjectId(meetupId) });\r\n\r\n\tclient.close();\r\n\r\n\treturn {\r\n\t\tprops: {\r\n\t\t\tmeetupData: {\r\n        id:selectedMeetup._id.toString(),\r\n        title:selectedMeetup.title,\r\n        address:selectedMeetup.address,\r\n        image:selectedMeetup.image,\r\n        description:selectedMeetup.description\r\n      }\r\n\t\t}\r\n\t};\r\n}\r\n\r\nexport default MeetupDetails;\r\n"]},"metadata":{},"sourceType":"module"}